name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev pkg-config

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    # - name: Check formatting
    #   run: cargo fmt --all -- --check

    # - name: Lint with clippy
    #   run: cargo clippy --all-targets --all-features -- -D warnings

    # - name: Run tests
    #   run: cargo test --all

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: hakinet-linux-x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: hakinet-windows-x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev pkg-config

    - name: Install WinPcap development libraries (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Download and install WinPcap development pack
        Invoke-WebRequest -Uri "https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip" -OutFile "WpdPack.zip"
        Expand-Archive -Path "WpdPack.zip" -DestinationPath "C:\"

        # Set environment variables for pcap library
        echo "LIB=C:\WpdPack\Lib\x64;C:\WpdPack\Lib" >> $env:GITHUB_ENV
        echo "LIBPCAP_LIBDIR=C:\WpdPack\Lib\x64" >> $env:GITHUB_ENV
        echo "LIBPCAP_INCLUDEDIR=C:\WpdPack\Include" >> $env:GITHUB_ENV

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binaries
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binaries (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        strip target/${{ matrix.target }}/release/hakinet
        strip target/${{ matrix.target }}/release/hakinet-scan

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: |
          target/${{ matrix.target }}/release/hakinet*
        retention-days: 7
