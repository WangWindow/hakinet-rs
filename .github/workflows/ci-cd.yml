name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev pkg-config

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt, clippy

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Lint with clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: hakinet-linux-x86_64
            archive: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: hakinet-windows-x86_64
            archive: zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev pkg-config

    - name: Install WinPcap development libraries (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Download and install WinPcap development pack
        Invoke-WebRequest -Uri "https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip" -OutFile "WpdPack.zip"
        Expand-Archive -Path "WpdPack.zip" -DestinationPath "C:\"

        # Set environment variables for pcap library
        echo "LIB=C:\WpdPack\Lib\x64;C:\WpdPack\Lib" >> $env:GITHUB_ENV
        echo "LIBPCAP_LIBDIR=C:\WpdPack\Lib\x64" >> $env:GITHUB_ENV
        echo "LIBPCAP_INCLUDEDIR=C:\WpdPack\Include" >> $env:GITHUB_ENV

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binaries
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binaries (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        strip target/${{ matrix.target }}/release/hakinet
        strip target/${{ matrix.target }}/release/hakinet-scan

    - name: Create release archive (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p release-artifacts
        cd target/${{ matrix.target }}/release
        tar -czf ../../../release-artifacts/${{ matrix.name }}.${{ matrix.archive }} \
          hakinet hakinet-scan
        cd ../../..
        tar -rf release-artifacts/${{ matrix.name }}.${{ matrix.archive }} README.md 2>/dev/null || true

    - name: Create release archive (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path release-artifacts

        $sourcePath = "target\${{ matrix.target }}\release\"
        Copy-Item "${sourcePath}hakinet.exe" "release-artifacts\"
        Copy-Item "${sourcePath}hakinet-scan.exe" "release-artifacts\"
        Copy-Item "README.md" "release-artifacts\" -ErrorAction SilentlyContinue

        Compress-Archive -Path "release-artifacts\*" -DestinationPath "release-artifacts\${{ matrix.name }}.${{ matrix.archive }}"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: release-artifacts/${{ matrix.name }}.${{ matrix.archive }}
        retention-days: 7

    - name: Upload release asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release-artifacts/${{ matrix.name }}.${{ matrix.archive }}
        asset_name: ${{ matrix.name }}.${{ matrix.archive }}
        asset_content_type: ${{ matrix.archive == 'zip' && 'application/zip' || 'application/gzip' }}

  release-info:
    name: Generate Release Info
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate release notes
      run: |
        cat > release_notes.md << 'EOF'
        ## 🐱 Hakinet Network Tools Suite - Release ${{ github.event.release.tag_name }}

        ### What's New
        - Latest build of hakinet packet capture tool
        - Latest build of hakinet-scan network scanner
        - Cross-platform support for Linux and Windows

        ### Downloads
        - **Linux (x86_64)**: `hakinet-linux-x86_64.tar.gz`
        - **Windows (x86_64)**: `hakinet-windows-x86_64.zip`

        ### Installation

        #### Linux
        ```bash
        tar -xzf hakinet-linux-x86_64.tar.gz
        sudo cp hakinet hakinet-scan /usr/local/bin/
        ```

        #### Windows
        1. Extract `hakinet-windows-x86_64.zip`
        2. Add the extracted folder to your PATH
        3. Install WinPcap or Npcap for packet capture functionality

        ### Usage
        ```bash
        # Packet capture
        sudo hakinet capture --help

        # Network scanning
        hakinet-scan scan --help
        ```

        ---
        ```
           /\_/\
          ( ^.^ ) "Thanks for using Hakinet! Remember to use these tools responsibly, meow!"
           > ^ <
        ```
        EOF

    - name: Upload release notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release_notes.md
