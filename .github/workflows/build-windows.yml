name: Build for Windows

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install WinPcap development libraries
      run: |
        # Download and install WinPcap development pack
        Invoke-WebRequest -Uri "https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip" -OutFile "WpdPack.zip"
        Expand-Archive -Path "WpdPack.zip" -DestinationPath "C:\"

        # Set environment variables for pcap library
        echo "LIB=C:\WpdPack\Lib\x64;C:\WpdPack\Lib" >> $env:GITHUB_ENV
        echo "LIBPCAP_LIBDIR=C:\WpdPack\Lib\x64" >> $env:GITHUB_ENV
        echo "LIBPCAP_INCLUDEDIR=C:\WpdPack\Include" >> $env:GITHUB_ENV

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    # - name: Check formatting
    #   run: cargo fmt --all -- --check

    # - name: Lint with clippy
    #   run: cargo clippy --all-targets --all-features -- -D warnings

    # - name: Run tests
    #   run: cargo test --all

    - name: Build release binaries
      run: |
        cargo build --release --target x86_64-pc-windows-msvc

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hakinet-windows-x86_64
        path: |
          target/x86_64-pc-windows-msvc/release/hakinet.exe
          target/x86_64-pc-windows-msvc/release/hakinet-scan.exe
        retention-days: 7
