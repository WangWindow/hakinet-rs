name: Build for Windows

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install WinPcap development libraries
      run: |
        # Download and install WinPcap development pack
        Invoke-WebRequest -Uri "https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip" -OutFile "WpdPack.zip"
        Expand-Archive -Path "WpdPack.zip" -DestinationPath "C:\"

        # Set environment variables for pcap library
        echo "LIB=C:\WpdPack\Lib\x64;C:\WpdPack\Lib" >> $env:GITHUB_ENV
        echo "LIBPCAP_LIBDIR=C:\WpdPack\Lib\x64" >> $env:GITHUB_ENV
        echo "LIBPCAP_INCLUDEDIR=C:\WpdPack\Include" >> $env:GITHUB_ENV

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        target: x86_64-pc-windows-msvc
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Lint with clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all

    - name: Build release binaries
      run: |
        cargo build --release --target x86_64-pc-windows-msvc

    - name: Create release archive
      if: github.event_name == 'release'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path release-artifacts

        # Copy binaries and documentation
        Copy-Item "target\x86_64-pc-windows-msvc\release\hakinet.exe" "release-artifacts\"
        Copy-Item "target\x86_64-pc-windows-msvc\release\hakinet-scan.exe" "release-artifacts\"
        Copy-Item "README.md" "release-artifacts\" -ErrorAction SilentlyContinue

        # Create ZIP archive
        Compress-Archive -Path "release-artifacts\*" -DestinationPath "release-artifacts\hakinet-windows-x86_64.zip"

    - name: Upload release artifacts
      if: github.event_name == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: hakinet-windows-x86_64
        path: release-artifacts/

    - name: Upload release asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release-artifacts/hakinet-windows-x86_64.zip
        asset_name: hakinet-windows-x86_64.zip
        asset_content_type: application/zip

    - name: Upload build artifacts (non-release)
      if: github.event_name != 'release'
      uses: actions/upload-artifact@v4
      with:
        name: hakinet-windows-debug
        path: |
          target/x86_64-pc-windows-msvc/release/hakinet.exe
          target/x86_64-pc-windows-msvc/release/hakinet-scan.exe
        retention-days: 7
